{"version":3,"sources":["components/tabs/Description/index.js","components/tabs/Specs/index.js","components/tabs/Reviews/ReviewItem/index.js","components/tabs/Reviews/ReviewList/index.js","components/tabs/Reviews/index.js","components/tabs/index.js","components/GemItem/index.js","components/Firebase.js","components/GemList/index.js","components/views/Home/index.js","components/views/Weather/index.js","components/views/Barchart/index.js","components/views/Racer/index.js","components/Navigation/index.js","components/Main/index.js","App.js","js/reducers/index.js","js/constants/action-types.js","js/store/index.js","serviceWorker.js","index.js"],"names":["Description","react_default","a","createElement","this","props","gem","description","Component","Specs","ReviewItem","review","rating","body","author","ReviewList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","submitReview","e","preventDefault","target","elements","value","newReview","id","Number","Date","createDate","addReview","alert","console","log","submittedReview","reviews","state","reviewList","slice","push","setState","selected","_this2","map","key","ReviewItem_ReviewItem","onSubmit","className","name","defaultValue","disabled","rows","placeholder","type","aria-describedby","Reviews","ReviewList_ReviewList","PanelTabs","handleClick","esm","defaultIndex","selectedTabClassName","href","onClick","Description_Description","Specs_Specs","Reviews_Reviews","GemItem","concat","price","toFixed","src","alt","onAddToCart","tabs_PanelTabs","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","settings","GemList","onCollectionUpdate","data","gems","forEach","doc","_doc$data","imagePath","inventory","ref","collection","unsubscribe","onSnapshot","GemItem_GemItem","Home","GemList_GemList","Weather","BarChart","Racer","Navigation","onEmptyCart","data-toggle","data-target","aria-controls","aria-expanded","aria-label","react_router_dom","to","cart","length","cartTotal","Main","updateCartTotal","existingTotal","item","addToCart","cartItem","currentCart","emptyCart","Navigation_Navigation","react_router","exact","path","render","Home_Home","component","compose","connect","default","firestoreConnect","initialState","rootReducer","arguments","undefined","action","assign","payload","firestoreReducer","store","createStore","applyMiddleware","thunk","withExtraArgument","getFirebase","getFirestore","reduxFirestore","Firebase","reactReduxFirebase","subscribe","Boolean","window","location","hostname","match","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c684cef2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Description extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.gem.description}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class Specs extends Component {\n    render() {\n        return (\n            <div>\n                This is the Specs component.\n      </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './main.css';\n\nexport default class ReviewItem extends Component {\n    render() {\n        const review = this.props.review;\n        return (\n            <div>\n                <blockquote>\n                    <h6>{review.rating} | {review.body}</h6>\n                    &mdash; {review.author}\n                </blockquote>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport ReviewItem from '../ReviewItem';\n\nexport default class ReviewList extends Component {\n    constructor(props) {\n\n        super(props)\n\n        this.state = {\n            reviewList: this.props.gem.reviews,\n            selected: \"Rate this product\"\n        };\n    }\n\n    submitReview = e => {\n        e.preventDefault();\n        const rating = e.target.elements.rating.value;\n        const body = e.target.elements.body.value;\n        const author = e.target.elements.author.value;\n        const newReview = {\n            id: Number(new Date()),\n            createDate: Number(new Date()),\n            rating,\n            body,\n            author\n        };\n        e.target.elements.rating.value = \"\";\n        e.target.elements.body.value = \"\";\n        e.target.elements.author.value = \"\";\n        rating && body && author ? this.addReview(newReview) : alert(\"Invalid Review\");\n        console.log(\"Review submitted\");\n    }\n\n    addReview = submittedReview => {\n        let reviews = this.state.reviewList.slice(0);\n        reviews.push(submittedReview);\n\n        this.setState(({\n            reviewList: reviews\n        }))\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.reviewList.map((review, key) => <ReviewItem reviewList={this.state.reviewList} key={review.id} review={review} />)}\n                <h5>Submit a review</h5>\n                <form onSubmit={this.submitReview}>\n                    <div className=\"form-group\">\n                        <select className=\"form-control\" name=\"rating\" id=\"\" defaultValue=\"0\">\n                            <option value=\"0\" disabled>Rate this product</option>\n                            <option value=\"1\">&#9733;</option>\n                            <option value=\"2\">&#9733;&#9733;</option>\n                            <option value=\"3\">&#9733;&#9733;&#9733;</option>\n                            <option value=\"4\">&#9733;&#9733;&#9733;&#9733;</option>\n                            <option value=\"5\">&#9733;&#9733;&#9733;&#9733;&#9733;</option>\n                        </select>\n                    </div>\n                    <div className=\"form-group\">\n                        <textarea className=\"form-control\" name=\"body\" id=\"\" rows=\"5\" placeholder=\"Write a brief review...\"></textarea>\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"email\" className=\"form-control\" name=\"author\" id=\"\" aria-describedby=\"helpId\" placeholder=\"Email\" />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success float-right\">Submit Review</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport ReviewList from './ReviewList';\n\nexport default class Reviews extends Component {\n    render() {\n        return (\n            <div>\n                <ReviewList gem={this.props.gem} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Tab, TabList, Tabs, TabPanel } from \"react-tabs\";\nimport Description from \"../tabs/Description\";\nimport './main.css';\nimport Specs from './Specs';\nimport Reviews from './Reviews';\n\nexport default class PanelTabs extends Component {\n    handleClick = e => e.preventDefault();\n\n    render() {\n        return (\n            <Tabs\n                defaultIndex={0}\n                selectedTabClassName=\"active\"\n            >\n                <TabList>\n                    <ul className=\"nav nav-tabs\">\n                        <Tab className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/\" onClick={this.handleClick}>Description</a>\n                        </Tab>\n                        <Tab className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/\" onClick={this.handleClick}>Specs</a>\n                        </Tab>\n                        <Tab className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/\" onClick={this.handleClick}>Reviews</a>\n                        </Tab>\n                    </ul>\n                </TabList>\n                <TabPanel><Description gem={this.props.gem} /></TabPanel>\n                <TabPanel><Specs /></TabPanel>\n                <TabPanel><Reviews gem={this.props.gem} /></TabPanel>\n            </Tabs>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './main.css';\nimport PanelTabs from '../tabs';\n\nexport default class GemItem extends Component {\n    render() {\n\n        const gem = this.props.gem;\n\n        return (\n            <div className=\"col-md-4 col-xs-12\">\n                <div className=\"card\">\n                    <h4 className=\"name_price\">{gem.name} <span className=\"float-right\">{`$${Number(gem.price).toFixed(2)}`}</span></h4>\n                    <img className=\"card-img-top\" src=\"http://placehold.it/500x500\" alt=\"Card\" />\n                    <div className=\"card-body\">\n                        <div className=\"text-center\">\n                            <button className=\"btn btn-success\" onClick={() => this.props.onAddToCart(gem)}>Add to cart</button>\n                        </div>\n                    </div>\n                    <div className=\"card-footer\">\n                        <PanelTabs gem={gem} />\n                    </div>\n                </div>\n                <br />\n            </div>\n        )\n    }\n}\n","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst settings = {};\n\nconst config = {\n    apiKey: \"AIzaSyDsGXfV7gc90jx83QOv3SmTOol4EJ7IeS8\",\n    authDomain: \"coding-temple-gemstore.firebaseapp.com\",\n    databaseURL: \"https://coding-temple-gemstore.firebaseio.com\",\n    projectId: \"coding-temple-gemstore\",\n    storageBucket: \"coding-temple-gemstore.appspot.com\",\n    messagingSenderId: \"566783479645\",\n};\n\nfirebase.initializeApp(config);\nfirebase.firestore().settings(settings)\n\nexport default firebase;","import React, { Component } from 'react'\nimport GemItem from '../GemItem';\nimport firebase from '../Firebase';\n\n// import { connect } from 'react-redux'\n\n// function mapStateToProps(state) {\n//   return {\n//     gems: state.default\n//   };\n// }\n\nexport default class GemList extends Component {\n    constructor() {\n        super()\n        this.ref = firebase.firestore().collection('gems');\n        this.unsubscribe = null;\n        this.state = {\n            gems: []\n        }\n    }\n\n    onCollectionUpdate = (data) => {\n        const gems = []\n        data.forEach(doc => {\n            const { name, price, description, imagePath, inventory, reviews } = doc.data();\n            gems.push({ key: doc.id, name, price, description, imagePath, inventory, reviews });\n            this.setState({\n                gems\n            })\n        })\n        // console.log(this.state.gems)\n    }\n\n    componentDidMount() {\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    {this.state.gems.map(gem => <GemItem key={gem.key} gem={gem} onAddToCart={this.props.onAddToCart} />)}\n                </div>\n            </div>\n        )\n    }\n}\n\n //export default connect(mapStateToProps)(GemList)","import React, { Component } from 'react'\nimport GemList from '../../GemList';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <GemList\n                    onAddToCart={this.props.onAddToCart}\n                />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Weather extends Component {\n    render() {\n        return (\n            <div>\n                This is the Weather API page.\n      </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class BarChart extends Component {\n    render() {\n        return (\n            <div>\n                This is the Barchart API page.\n      </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class Racer extends Component {\n    render() {\n        return (\n            <div>\n                This is the F1 Racer API page.\n      </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './main.css';\n\nexport default class Navigation extends Component {\n    render() {\n        const onEmptyCart = this.props.onEmptyCart;\n        return (\n            <div>\n                <nav className=\"navbar navbar-fixed navbar-expand-md navbar-dark bg-dark\">\n                    <a className=\"navbar-brand\" href=\"/\">Coding Temple Gemstore</a>\n                    <button className=\"navbar-toggler hidden-lg-up\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\n                        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/\">Home</Link>\n                            </li>\n                            {/* <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/weather\">Weather API</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/barchart\">Barchart API</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/f1-racer\">F1 Racer API</Link>\n                            </li> */}\n                        </ul>\n                        <ul className=\"navbar-nav m1-auto\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/\"><span className=\"fas fa-shopping-cart\"> {this.props.cart.length} | ${this.props.cartTotal.toFixed(2)}</span> | <button className=\"btn btn-sm btn-danger\" onClick={onEmptyCart}>Clear Cart</button></Link>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Home from '../views/Home';\nimport Weather from '../views/Weather';\nimport BarChart from '../views/Barchart';\nimport Racer from '../views/Racer';\nimport Navigation from '../Navigation';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nexport default class Main extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            cart: [],\n            cartTotal: 0,\n            gems: []\n        };\n    }\n\n    updateCartTotal = () => {\n        let existingTotal = this.state.cartTotal;\n        existingTotal = 0;\n        this.state.cart.forEach(item => {\n            existingTotal += item.price;\n        });\n        return this.setState({\n            cartTotal: existingTotal\n        })\n    }\n\n    addToCart = cartItem => {\n        let currentCart = this.state.cart;\n        currentCart.push(cartItem);\n        this.setState({\n            cart: currentCart\n        });\n        this.updateCartTotal();\n    };\n\n    emptyCart = () => this.setState({ cart: [], cartTotal: 0 });\n\n    render() {\n        // console.log(this.props)\n        return (\n            <Router>\n                <div>\n                    <Navigation onEmptyCart={this.emptyCart} cart={this.state.cart} cartTotal={this.state.cartTotal} />\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <Home onAddToCart={this.addToCart} />}></Route>\n                            <Route path=\"/weather\" component={Weather}></Route>\n                            <Route path=\"/barchart\" component={BarChart}></Route>\n                            <Route path=\"/f1-racer\" component={Racer}></Route>\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}\n","import Main from './components/Main';\n\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\n\n\nfunction mapStateToProps(state) {\n  //console.log(state)\n  return {\n    gems: state.default \n  }\n}\n\n/* const App = connect(mapStateToProps)(Main)\n\nexport default App */\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'gems' }\n  ])\n)(Main)","import { ADD_GEMS } from '../constants/action-types'\nimport { firestoreReducer } from 'redux-firestore'\n\nconst initialState = {\n    gems: [],\n};\n\nconst rootReducer = (state = initialState, action) => {\n    if (action.type === ADD_GEMS) {\n        return Object.assign({}, state, {\n            gems: state.gems.concat(action.payload),\n            firestore: firestoreReducer\n        });\n    }\n    return state\n};\n\nexport default rootReducer;","export const ADD_GEMS = 'ADD_GEMS'","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n//import { addGems } from \"../actions\";\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport Firebase from '../../components/Firebase';\n\n\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(Firebase),\n        reactReduxFirebase(Firebase)\n    )\n);\n\n\n\nstore.subscribe(() => console.log('Look ma, Redux!!'))\n//store.dispatch(addGems({ title: 'React Redux Tutorial for Beginners', id: 1 }))\n\nexport default store;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './js/store/index';\n\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}